@model List<Logic.Cashed.Contract.Models.CategoryModel>
@{
    ViewBag.Title = "Категории";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<button class="showcheckboxes btn btn-outline-secondary btn-sm">Выбрать</button>
<button class="hidecheckboxes btn btn-outline-secondary btn-sm" hidden>Убрать выделение</button>
<button type="button" class="delete-button btn btn-outline-danger btn-sm" data-toggle="modal" data-target="#deleteModal" hidden>
    Удалить
</button>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th class="checkbox-cell" hidden>
                <input type="checkbox" class="toggle-all-chechboxes"/>
            </th>
            <th>
                Номер
            </th>
            <th>
                Название
            </th>
        </tr>
    </thead>
    <tbody id="cat-table-body">
        @for (int i = 0; i < Model.Count; i++)
        {
            <tr data-id="@Model[i].Id">
                <td class="checkbox-cell" hidden>
                    <input type="checkbox" class="category-checkbox" data-id="@Model[i].Id"/>
                </td>
                <td>@Model[i].Id</td>
                <td>
                    @Html.ActionLink(Model[i].Name, "Edit", new { id = Model[i].Id }, new { @class = "edit-item-link" })
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="enter-cat-name" class="validation-summary-errors validation-string no-items-message" hidden="hidden">
    Введите название категории!
</div>

<div id="cat-exists" class="validation-summary-errors validation-string no-items-message" hidden="hidden">
    Такая категория уже есть!
</div>

<div class="container">
    <div class="row">
        <div class="form-group row">
            <label class="col-form-label col-md-4" for="Category">Название категории</label>
            <div class="col-md-6">
                <input id="Category" type="text" class="form-control"/>
            </div>
            <div class="col-md-2">
                <button id="add-cat-btn" class="btn btn-primary">Добавить</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Удаление категорий</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Удалить помеченные категорией с сохранением операций по ним и их продуктов?
                Или удалить их полностью. Тогда продукты и операции будут удалены также.
            </div>
            <div class="modal-footer">
                <button id="deleteOnlyMarkButton" type="button" class="btn btn-primary" data-dismiss="modal">Удалить с сохранением</button>
                <button id="deleteFullButton" type="button" class="btn btn-danger" data-dismiss="modal">Удалить полностью</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        $(document).ready(function() {
            activateLink("#categoriesLink");

            $(".showcheckboxes").click(showCheckboxes);
            $(".hidecheckboxes").click(hideCheckboxes);
            $(".toggle-all-chechboxes").change(toggleAllCheckboxes);
            $(".category-checkbox").change(categoryCheckboxChanged);
            $("#deleteOnlyMarkButton").click(function() { deleteCategories(true); });
            $("#deleteFullButton").click(function() { deleteCategories(false); });
        });

        function showCheckboxes() {
            $(".checkbox-cell").removeAttr("hidden");
            $(".hidecheckboxes").removeAttr("hidden");
            $(".showcheckboxes").attr("hidden", "hidden");
        }

        function hideCheckboxes() {
            $("input[type=checkbox]").prop("checked", false);
            categoryCheckboxChanged();
            $(".checkbox-cell").attr("hidden", "hidden");
            $(".showcheckboxes").removeAttr("hidden");
            $(".hidecheckboxes").attr("hidden", "hidden");
        }

        function toggleAllCheckboxes(event) {
            if ($(".toggle-all-chechboxes:checked").length) {
                $(".category-checkbox").prop("checked", true);
            } else {
                $(".category-checkbox").prop("checked", false);
            }
            categoryCheckboxChanged();
        }

        function categoryCheckboxChanged() {
            if ($(".category-checkbox:checked").length)
                $(".delete-button").removeAttr("hidden");
            else
                $(".delete-button").attr("hidden", "hidden");
        }

        function deleteCategories(onlyMark) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("Delete", "Category")',
                contentType: "application/json; charset=utf-8",
                data: { idList: JSON.stringify(getDeleteIdList()), onlyMark: onlyMark },
                dataType: "json",
                success: function(data) {
                    deleteRows(data);
                },
                error: function() { alert('Failure'); }
            });
        }

        function getDeleteIdList() {
            var chk = $(".category-checkbox:checked");
            var ids = chk.map(function(index, item) {
                return +$(item).attr("data-id");
            });
            var idList = [];
            for (var i = 0; i < ids.length; i++) {
                idList[i] = +ids[i];
            }
            return idList;
        }

        function deleteRows(ids) {
            for (var i = 0; i < ids.length; i++) {
                var tr = $("tr[data-id=" + ids[i] + "]");
                console.log(tr);
                tr.remove();
            }
            categoryCheckboxChanged();
        }

        function addCategoryToTable(table, model) {
            hideCheckboxes();
            $('<tr>').addClass("data-row")
                .attr("data-id", model.Id)
                .append($("<td>").addClass("checkbox-cell").attr("hidden", "hidden")
                    .append($("<input>").attr("type", "checkbox").addClass("product-checkbox")
                        .attr("data-id", model.Id).change(categoryCheckboxChanged)))
                .append($('<td>').html(
                    model.Id
                ))
                .append($('<td>').html(
                    model.Name
                ))
                .appendTo(table);
        }

        $("#add-cat-btn").click(function() {
            var catName = $("#Category").val();
            if (!catName) {
                $("#enter-cat-name").removeAttr("hidden");
            } else {
                $("#enter-cat-name").attr("hidden", "hidden");
                addCategory(catName);
            }
        });

        function addCategory(catName) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("AddCategory", "Category")',
                contentType: "application/json; charset=utf-8",
                data: { categoryName: catName },
                dataType: "json",
                success: function(data) {
                    if (data.Status) {
                        $("#cat-exists").attr("hidden", "hidden");
                        addCategoryToTable($("#cat-table-body"), data.Model);
                        $("#Category").val("");
                        //updateShowcheboxesVisibility();
                    } else {
                        $("#cat-exists").removeAttr("hidden");
                        $("#cat-exists").html(data.Message);
                    }
                },
                error: function() { alert('Server failure!'); }
            });
        }

    </script>

}

